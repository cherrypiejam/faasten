#!/usr/bin/env python3
""" Read in two reports generated by running `trace-cmd record -e kvm -e kvmmmu`.
One report should be named `PREFIX_memory_copy` and the other should be named `PREFIX_cow`.
Two reports are generated by restoring from snapshots through memory copying or copy-on-write.
The script print page faults to the same guest physical addresses of the same types in the two
reports to `PREFIX.copy.cow.both` and print page faults only present in exactly one of the two to
`PREFIX.copy.only` and `PREFIX.cow.only`.
In addition, the script prints statistics to the screen.
"""

import sys
from collections import defaultdict

if len(sys.argv) != 2:
    print('usage: ./print_diff_page_faults_copy_cow.py PREFIX')
    exit(1)

fault_set = {'_memory_copy': set(), '_cow': set()}
count = 0
PAGE_SHIFT = 12
suffixes = ['_memory_copy', '_cow']
for suffix in suffixes:
    with open(sys.argv[1] + suffix) as infile:
        for line in infile:
            strs = line.strip().split()
            if len(strs) > 3 and strs[3] == 'kvm_page_fault:':
                gpa = int(strs[5], 16)
                if gpa >= 0xd0000000 and gpa < 0xd0002000:
                    print('mmio address: ' + hex(gpa))
                    continue
                count += 1
                error_code = strs[-1]
                fault_set[suffix].add((gpa, int(error_code, 16)))
                #faulty_gfn_gpa_list[gpa >> PAGE_SHIFT].append((strs[5], error_code))
                #faulty_gpa.add(gpa)
                #fault_type_counts[strs[-1]] +=1
#with open(sys.argv[2]) as dumped_gfns:
    #for line in dumped_gfns:
    #    dumped_gfn_set.add(int(line.strip(), 16))
#both = set(faulty_gfn_gpa_list.keys()) & dumped_gfn_set
#only = set(faulty_gfn_gpa_list.keys()) - dumped_gfn_set
#print('Number of page faults: {}'.format(count))
#print('Number of faulty guest page frames: {}'.format(len(faulty_gfn_gpa_list)))
#print('Number of faulty guest physical addresses: {}'.format(len(faulty_gpa)))
#print('Number of faulty guest page frames contained in memory dump: {}'.format(len(both)))
#print('Number of faulty guest page frames not contained in memory dump: {}'.format(len(only)))
#print('Number of pages contained in memory dump: {}'.format(len(dumped_gfn_set)))
#print('fault type | counts')
#for k in sorted(list(fault_type_counts.keys())):
#    print('{}: {}'.format(k, fault_type_counts[k]))
#
#with open(sys.argv[1] + '.both', 'w') as ofile:
#    for k in both:
#        print('0x{:x}: {}'.format(k, faulty_gfn_gpa_list[k]), file=ofile)
#with open(sys.argv[1] + '.only', 'w') as ofile:
#    for k in only:
#        print('0x{:x}: {}'.format(k, faulty_gfn_gpa_list[k]), file=ofile)
        
both = fault_set[suffixes[0]] & fault_set[suffixes[1]]
cow_only = fault_set[suffixes[1]] - fault_set[suffixes[0]]
copy_only = fault_set[suffixes[0]] - fault_set[suffixes[1]]
print('Number of page faults in both: {}'.format(len(both)))
print('Number of page faults only in copy on write: {}'.format(len(cow_only)))
print('Number of page faults only in memory copying: {}'.format(len(copy_only)))

suffixes = ['.copy.cow.both', '.copy.only', '.cow.only']
data = [both, copy_only, cow_only]
for i in range(len(suffixes)):
    with open(sys.argv[1] + suffixes[i], 'w') as ofile:
        for gpa, error in data[i]:
            print(' '.join([hex(gpa), hex(error)]), file=ofile)
