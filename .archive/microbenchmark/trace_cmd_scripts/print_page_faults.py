#!/usr/bin/env python3
""" Read in a report generated by running `trace-cmd record -e kvm`
and print guest page frames (gfns) that are contained in memory dump tp ,report-name>.only and
guest page frames that are not contained in memory dump to <report-name>.both, and print
the number of total page faults, the number of different guest physical addresses, the number of
different guest frame numbers, and the number of pages in memory dump to the screen.
"""
import argparse
import sys
from collections import defaultdict

faulty_gfn_gpa_list = defaultdict(list)
faulty_gpa = set()
dumped_gfn_set = set()
count = 0
fault_type_counts = defaultdict(int)

parser = argparse.ArgumentParser()
parser.add_argument('--ftrace_report', nargs=1, help='ftrace report generated by `trace-cmd record -e kvm -e kvmmmu`', required=True)
parser.add_argument('--page_numbers', nargs=1, help='line-separated ordered guest physical page frames contained in a snapshot, generated during snapshot generation', required=True)
parser.add_argument('--hugepage', action='store_true', help='if present ftrace-report is generated with hugepage turned on', required=False)
args = parser.parse_args()

PAGE_SHIFT = 12
if args.hugepage:
    PAGE_SHIFT += 9

with open(args.ftrace_report[0]) as infile, open(args.page_numbers[0]) as dumped_gfns:
    for line in dumped_gfns:
        if args.hugepage:
            dumped_gfn_set.add(int(line.strip(), 16) >> 9)
        else:
            dumped_gfn_set.add(int(line.strip(), 16))
    for line in infile:
        strs = line.strip().split()
        if len(strs) > 3 and strs[3] == 'kvm_page_fault:':
            gpa = int(strs[5], 16)
            if gpa >= 0xd0000000 and gpa < 0xd0002000:
                print('mmio address: ' + hex(gpa))
                continue
            count += 1
            error_code = strs[-1]
            faulty_gfn_gpa_list[gpa >> PAGE_SHIFT].append((strs[5], error_code))
            faulty_gpa.add(gpa)
            fault_type_counts[strs[-1]] +=1

both = set(faulty_gfn_gpa_list.keys()) & dumped_gfn_set
only = set(faulty_gfn_gpa_list.keys()) - dumped_gfn_set
print('Number of page faults: {}'.format(count))
print('Number of faulty guest page frames: {}'.format(len(faulty_gfn_gpa_list)))
print('Number of faulty guest physical addresses: {}'.format(len(faulty_gpa)))
print('Number of faulty guest page frames contained in memory dump: {}'.format(len(both)))
print('Number of faulty guest page frames not contained in memory dump: {}'.format(len(only)))
print('Number of pages contained in memory dump: {}'.format(len(dumped_gfn_set)))
print('fault type | counts')
for k in sorted(list(fault_type_counts.keys())):
    print('{}: {}'.format(k, fault_type_counts[k]))

with open(args.ftrace_report[0] + '.both', 'w') as ofile:
    for k in both:
        print('0x{:x}: {}'.format(k, faulty_gfn_gpa_list[k]), file=ofile)
with open(args.ftrace_report[0] + '.only', 'w') as ofile:
    for k in only:
        print('0x{:x}: {}'.format(k, faulty_gfn_gpa_list[k]), file=ofile)
